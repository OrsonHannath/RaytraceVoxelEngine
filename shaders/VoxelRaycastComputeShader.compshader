#version 440 core
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen;

// Custom Structures
struct Voxel{
    int type;
};

struct VoxelType{
    int type;
    float opacity;
    float r;
    float g;
    float b;
    float emission_r;
    float emission_g;
    float emission_b;
    float emission_strength;
};

struct WorldSettings{
    int numberOfLights;
    int chunkSize;
    int renderDistance;
    int totalSize;
};

struct LightingSettings{
    int state;
    int maxBounces;
};

struct Camera{
    float posX, posY, posZ;
    float dirX, dirY, dirZ;
    float rightX, rightY, rightZ;
    float upX, upY, upZ;
    float aspectRatio;
    float fov;
};

struct Light{
    float size;
    float x, y, z;
    float dirX, dirY, dirZ;
    float r, g, b;
    float intensity;
    int type;  // 0 = ambient, 1 = directional, 2 = point, 3 = spot
};

struct RayHit{
    bool hit;
    float distance;
};

struct VoxelProperties{
    vec4 colour;
    vec4 emission;
    float emission_strength;
};

struct RaycastResult{
    bool hit;
    vec3 position;
    vec3 normal;
    VoxelProperties voxelProperties;
};

struct Ray{
    vec3 origin;
    vec3 direction;
};

struct LightHit{
    bool hit;
    vec4 colour;
};

// Pass in Camera Information
layout(binding = 1) buffer camera_data {

    Camera cameras[];
};

// Pass in Lighting Information
layout(binding = 2) buffer world_lights {

    Light lights[];
};

// Pass in the Voxel Indices Array
layout(binding = 3) buffer world_voxel_indices {

    int voxel_indices[];
};

// Pass in the Voxel Data Array
layout(binding = 4) buffer world_voxel_data {

    Voxel world_voxels[];
};

// Pass in the world settings
layout(binding = 5) buffer world_settings {

    WorldSettings worldSettings[];
};

// Pass in the lighting settings
layout(binding = 6) buffer lighting_settings {

    LightingSettings lightingSettings[];
};

// Pass in the voxel types information
layout(binding = 7) buffer voxel_type_data {

    VoxelType voxel_types[];
};

int FlatIndex(int x, int y, int z){

    // Make sure in bounds positive
    if(x >= worldSettings[0].totalSize || y >= worldSettings[0].totalSize || z >= worldSettings[0].totalSize){
        return -1;
    }

    // Makes sure in bounds negative
    if(x < 0 || y < 0 || z < 0){
        return -1;
    }

    return x + worldSettings[0].totalSize * (y + worldSettings[0].totalSize * z);
}

int GetVoxelIndex(int x, int y, int z){

    int index = FlatIndex(x, y, z);
    if(index >= 0 && index < voxel_indices.length()){

        return voxel_indices[FlatIndex(x, y, z)];
    }

    return -1;
}

bool IsAirVoxel(int x, int y, int z){

    if(world_voxels[GetVoxelIndex(x, y, z)].type == 0){
        return true;
    }

    return false;
}

bool IsVoxelAt(int x, int y, int z){

    // Check if there is a voxel at the given coordinates
    if(GetVoxelIndex(x, y, z) != -1 && !IsAirVoxel(x, y, z)){

        return true;
    }

    return false;
}

Voxel GetVoxelAt(int x, int y, int z){

    if(IsVoxelAt(x, y, z)){

        return world_voxels[GetVoxelIndex(x, y, z)];
    }

    return Voxel(-1);
}

vec4 SkyboxColour(Ray ray){

    vec4 colour = vec4(0.075, 0.133, 0.173, 1.0);
    return colour;
}

// https://tavianator.com/2022/ray_box_boundary.html
RayHit RayIntersect(Ray ray, vec3 boundsPosition, float boundsScale){

    // Calculate the voxels bounding positions, i.e., two opposing corners of the voxel
    vec3 boundsMin = boundsPosition - 1; // decrease by 1 to account for edge cases
    vec3 boundsMax = boundsPosition + vec3(boundsScale) + 1; // increase by 1 to account for edge cases

    vec3 invRayDirection = 1.0 / ray.direction;

    float tmin = 0.0, tmax = (1.0/0.0);

    for (int d = 0; d < 3; ++d) {
        float t1 = (boundsMin[d] - ray.origin[d]) * invRayDirection[d];
        float t2 = (boundsMax[d] - ray.origin[d]) * invRayDirection[d];

        tmin = max(tmin, min(t1, t2));
        tmax = min(tmax, max(t1, t2));
    }

    RayHit rayHit = {false, 0};
    if(tmin < tmax){
        rayHit.hit = true;
        rayHit.distance = tmin;
    }
    return rayHit;
}

RaycastResult Raycast(Ray ray){

    // The return object of the function
    RaycastResult result = {false, vec3(0.0), vec3(0.0), {vec4(0.0), vec4(0.0), 0.0}};

    // Raycasting Logic
    vec3 pos = floor(ray.origin);
    vec3 step = sign(ray.direction);
    vec3 tDelta = step / ray.direction;
    float tMaxX, tMaxY, tMaxZ;
    vec3 fr = fract(ray.origin);

    tMaxX = tDelta.x * ((ray.direction.x>0.0) ? (1.0 - fr.x) : fr.x);
    tMaxY = tDelta.y * ((ray.direction.y>0.0) ? (1.0 - fr.y) : fr.y);
    tMaxZ = tDelta.z * ((ray.direction.z>0.0) ? (1.0 - fr.z) : fr.z);

    // Check that the ray has the possibility to intersect a voxel using the RayIntersect function
    RayHit rh = RayIntersect(ray, vec3(0,0,0), worldSettings[0].chunkSize * worldSettings[0].renderDistance);
    if(!rh.hit){
        return result;
    }

    vec3 norm;
    const int maxTrace = 1000;
    const int tracesCheckInt = 50;
    for (int i = 0; i < maxTrace; i++) {

        // Every x traces check that the ray has the potential to collide with a voxel using the RayIntersect function
        if(i % tracesCheckInt == 0){

            RayHit rh = RayIntersect(ray, vec3(0,0,0), worldSettings[0].chunkSize * worldSettings[0].renderDistance);
            if(!rh.hit){
                break;
            }
        }

        if (tMaxX < tMaxY) {
            if (tMaxZ < tMaxX) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                norm = vec3(0, 0,-step.z);
            } else {
                tMaxX += tDelta.x;
                pos.x += step.x;
                norm = vec3(-step.x, 0, 0);
            }
        } else {
            if (tMaxZ < tMaxY) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                norm = vec3(0, 0, -step.z);
            } else {
                tMaxY += tDelta.y;
                pos.y += step.y;
                norm = vec3(0, -step.y, 0);
            }
        }

        // Update the rays position so that the bounding box check works correctly
        ray.origin = pos;

        // Check if there is a voxel at the position
        if(IsVoxelAt(int(pos.x), int(pos.y), int(pos.z))){

            // Get the voxel at the position
            Voxel vox = GetVoxelAt(int(pos.x), int(pos.y), int(pos.z));

            // Set the results data
            result.voxelProperties.colour = vec4(voxel_types[vox.type].r, voxel_types[vox.type].g, voxel_types[vox.type].b, 1);
            result.voxelProperties.emission = vec4(voxel_types[vox.type].emission_r, voxel_types[vox.type].emission_g, voxel_types[vox.type].emission_b, 1);
            result.voxelProperties.emission_strength = voxel_types[vox.type].emission_strength;
            result.hit = true;
            result.position = pos;
            result.normal = norm;
            break;
        }
    }

    return result;
}

// https://www.youtube.com/watch?v=Qz0KTGYJtUk&t=370s&ab_channel=SebastianLague
float RandomValue(in out uint state){

    state += (state + 195439) * (state + 124395) * (state + 845921);
    return state / 4294967295.0;
}

// Generate a random number in the specified range
float RandomValue(in out uint state, float lower, float upper){

    // update state and calculate the regular RandomValue();
    float unmappedNumber = RandomValue(state);
    float mappedState = unmappedNumber * upper - lower + lower;
    return mappedState;
}

// Generates a random direction within the specified range
vec3 RandomDirection(in out uint state, float min, float max){

    vec3 direction = {0,0,0};

    // Generate random values for the x, y, and z axis within the specified range
    float x = RandomValue(state, min, max);
    float y = RandomValue(state, min, max);
    float z = RandomValue(state, min, max);

    // Return the normalized vector of these ranges
    return normalize(vec3(x, y, z));
}

// Generates a random direction within the specified range
vec3 RandomDirection(in out uint state, vec3 normal, float min, float max){

    vec3 direction = {0,0,0};

    // Generate random values for the x, y, and z axis within the specified range
    direction.x = RandomValue(state, min, max);
    direction.y = RandomValue(state, min, max);
    direction.z = RandomValue(state, min, max);

    // Return the normalized vector of these ranges
    return normalize(direction);
}

LightHit DirectLighting(Ray ray){

    // The return object of the function
    LightHit lh = {false, vec4(1.0)};

    // Loop through all the lights in the scene and use them to calculate lighting data
    for(int i = 0; i < worldSettings[0].numberOfLights; i++){

        // Check for all non-ambient lights
        if(lights[i].type == 1){ // Directional Lights: light that just has a direction and unlimited range i.e. the sun

            // Get a reference to the directional light
            Light dirLight = lights[i];

            // TODO: Need to cast a ray towards the directional light and then apply lighting if not contact

            // Reverse the lights direction vector
            ray.direction = -1 * vec3(dirLight.dirX, dirLight.dirY, dirLight.dirZ);

            // Perform a raycast with the updated ray
            RaycastResult result = Raycast(ray);
            if(!result.hit){

                // If the raycast does not hit then we should be lighting this voxel
                lh.hit = true;
                lh.colour += vec4(0.2);
            }

        }else if(lights[i].type == 2){ // Point Lights


        }else if(lights[i].type == 3){ // Spot Lights


        }
    }

    return lh;
}

// All lighting that is not from voxel emissions nor ambient
LightHit EnvironmentLighting(Ray ray){

    // The return object of the function
    LightHit lh = {false, vec4(1.0)};

    // Loop through all the lights in the scene and use them to calculate lighting data
    for (int i = 0; i < worldSettings[0].numberOfLights; i++) {

        // Check for all non-ambient lights
        if (lights[i].type == 1) { // Directional Lights: light that just has a direction and unlimited range (e.g., the sun)

            // Get a reference to the directional light
            Light dirLight = lights[i];

            // Calculate Lambertian shading
            float lightIntensity = dot(normalize(ray.direction), normalize(-vec3(dirLight.dirX, dirLight.dirY, dirLight.dirZ)));
            lightIntensity = max(0.0, lightIntensity);

            //// Apply directional light
            lh.hit = true;
            lh.colour *= lightIntensity * dirLight.intensity * vec4(dirLight.r, dirLight.g, dirLight.b, 1.0);

        } else if (lights[i].type == 2) { // Point Lights
            // TODO: Implement point lights
        } else if (lights[i].type == 3) { // Spot Lights
            // TODO: Implement spot lights
        }
    }

    return lh;
}

// All ambient lighting in the scene is added to the original voxel here
LightHit AmbientLighting(){

    // The return object of the function
    LightHit lh = {false, vec4(1.0)};

    // Loop through all the lights in the scene and use them to calculate lighting data
    for(int i = 0; i < worldSettings[0].numberOfLights; i++){

        // Find all the ambient lights and apply the lighting
        if(lights[i].type == 0){

            // Get a reference to the ambient light
            Light ambientLight = lights[i];

            // Apply ambient light
            lh.hit = true;
            lh.colour *= ambientLight.intensity * vec4(ambientLight.r, ambientLight.g, ambientLight.b, 1.0);
        }
    }

    return lh;
}

vec4 Raytrace(in out uint state, Ray ray){

    vec4 envlight = vec4(0.0);
    vec4 direction = vec4(0.0);
    vec4 incomingLight = {0,0,0,0};
    vec4 rayColour = {1,1,1,1};

    // Since the ray hit a voxel we will now bounce the light ray off of it and any subsequently hit voxels
    for(int i = 0; i < lightingSettings[0].maxBounces; i++){

        // Run the Raycast function to see if this ray will hit another voxel
        RaycastResult result = Raycast(ray);
        if(result.hit){

            // Update the rays origin to be the hit position
            ray.origin = result.position;

            // Update the rays direction to be a random direction out from the rays normal direction
            ray.direction = normalize(result.normal + RandomDirection(state, result.normal, -1.0, 1.0));

            // Calculate the emmited light
            vec4 emittedLight = result.voxelProperties.emission * result.voxelProperties.emission_strength;

            // Update incoming light
            incomingLight += emittedLight * rayColour;

            // Update the rays colour
            rayColour *= result.voxelProperties.colour;
        }else{

            incomingLight += EnvironmentLighting(ray).colour * rayColour;
            break;
        }
    }

    //return direction;
    //return envlight;
    // return rayColour;
    return incomingLight;
}

void main() {

    // Set a default pixel color and obtain pixel coordinates
    vec4 pixel = vec4(0.075, 0.133, 0.173, 1.0);
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(screen);

    // State used for random number generation
    uint state = pixel_coords.y * dims.x + pixel_coords.x + lightingSettings[0].state;

    // Obtain the camera position and orientation
    vec3 cam_o = vec3(cameras[0].posX, cameras[0].posY, cameras[0].posZ);
    vec3 cam_right = vec3(cameras[0].rightX, cameras[0].rightY, cameras[0].rightZ);
    vec3 cam_up = vec3(cameras[0].upX, cameras[0].upY, cameras[0].upZ);
    vec3 cam_dir = vec3(cameras[0].dirX, cameras[0].dirY, cameras[0].dirZ);

    // Adjust x and y for the aspect ratio
    float aspectRatio = float(dims.x) / float(dims.y);
    float x = (float(pixel_coords.x * 2 - dims.x) / dims.x) * aspectRatio;
    float y = float(pixel_coords.y * 2 - dims.y) / dims.y;

    // Define FOV in radians (for example, 60 degrees)
    float fov = radians(cameras[0].fov); // Change the FOV value as needed

    // Calculate the view space ray direction
    float tanFov = tan(fov * 0.5);
    vec3 rightDir = normalize(cam_right) * x * tanFov;
    vec3 upDir = normalize(cam_up) * y * tanFov;
    vec3 ray_d = normalize(cam_dir + rightDir + upDir);

    // Calculate the point on the screen in the world space
    vec3 ray_o = cam_o;

    // Make the ray
    Ray ray = {ray_o, ray_d};

    vec4 light = Raytrace(state, ray);
    pixel = light;

    imageStore(screen, pixel_coords, pixel);
}